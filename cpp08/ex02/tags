!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/nfs/homes/atucci/Desktop/CPlusPlus-ModulesCpp/cpp08/ex02/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(NAME)	Makefile	/^$(NAME): $(OBJ)$/;"	t
%.o	Makefile	/^%.o: %.cpp$/;"	t
BG_CYAN	MutantStack.hpp	/^# define BG_CYAN /;"	d
BG_GREEN	MutantStack.hpp	/^# define BG_GREEN /;"	d
BG_RED	MutantStack.hpp	/^# define BG_RED /;"	d
BG_RESET	MutantStack.hpp	/^# define BG_RESET /;"	d
BG_YELLOW	MutantStack.hpp	/^# define BG_YELLOW /;"	d
BLUE	MutantStack.hpp	/^# define BLUE /;"	d
CXX	Makefile	/^CXX = c++$/;"	m
CYAN	Makefile	/^CYAN := \\033[1;36m$/;"	m
CYAN	MutantStack.hpp	/^# define CYAN /;"	d
FLAG	Makefile	/^FLAG = -Wall -Wextra -Werror -std=c++98$/;"	m
GRAY	MutantStack.hpp	/^# define GRAY /;"	d
GREEN	Makefile	/^GREEN := \\033[1;32m$/;"	m
GREEN	MutantStack.hpp	/^# define GREEN /;"	d
MUTANTSTACK_HPP	MutantStack.hpp	/^#define MUTANTSTACK_HPP$/;"	d
MutantStack	MutantStack.hpp	/^	MutantStack() : std::stack<T, CT>() {};$/;"	f	class:MutantStack
MutantStack	MutantStack.hpp	/^	MutantStack(const MutantStack<T, CT> &obj): std::stack<T, CT>(obj) { *this = obj; }$/;"	f	class:MutantStack
MutantStack	MutantStack.hpp	/^class MutantStack : public std::stack<T, CT>$/;"	c
NAME	Makefile	/^NAME = MutantStack$/;"	m
PURPLE	MutantStack.hpp	/^# define PURPLE /;"	d
RED	Makefile	/^RED := \\033[1;31m$/;"	m
RED	MutantStack.hpp	/^# define RED /;"	d
RESET	Makefile	/^RESET := \\033[0m$/;"	m
RESET	MutantStack.hpp	/^# define RESET /;"	d
SOURCE	Makefile	/^SOURCE = main.cpp \\$/;"	m
YELLOW	Makefile	/^YELLOW := \\033[1;33m$/;"	m
YELLOW	MutantStack.hpp	/^# define YELLOW /;"	d
all	Makefile	/^all: $(NAME)$/;"	t
begin	MutantStack.hpp	/^	iterator begin() { return this->c.begin(); }$/;"	f	class:MutantStack	typeref:typename:iterator
clean	Makefile	/^clean:$/;"	t
end	MutantStack.hpp	/^	iterator end() { return this->c.end(); }$/;"	f	class:MutantStack	typeref:typename:iterator
fclean	Makefile	/^fclean: clean$/;"	t
hidden	Makefile	/^hidden:$/;"	t
iterator	MutantStack.hpp	/^	typedef typename std::stack<T>::container_type::iterator iterator;$/;"	t	class:MutantStack	typeref:typename:std::stack<T>::container_type::iterator
main	SubjectMain.cpp	/^int main()$/;"	f	typeref:typename:int
main	main.cpp	/^int main()$/;"	f	typeref:typename:int
operator =	MutantStack.hpp	/^	MutantStack& operator=(const MutantStack &obj)$/;"	f	class:MutantStack	typeref:typename:MutantStack &
re	Makefile	/^re: fclean all$/;"	t
~MutantStack	MutantStack.hpp	/^	~MutantStack() {};$/;"	f	class:MutantStack
