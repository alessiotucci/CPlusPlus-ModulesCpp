!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/nfs/homes/atucci/Desktop/CPlusPlus-ModulesCpp/cpp08/ex01/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(NAME)	Makefile	/^$(NAME): $(OBJ)$/;"	t
%.o	Makefile	/^%.o: %.cpp$/;"	t
BG_CYAN	Span.hpp	/^# define BG_CYAN /;"	d
BG_GREEN	Span.hpp	/^# define BG_GREEN /;"	d
BG_RED	Span.hpp	/^# define BG_RED /;"	d
BG_RESET	Span.hpp	/^# define BG_RESET /;"	d
BG_YELLOW	Span.hpp	/^# define BG_YELLOW /;"	d
BLUE	Span.hpp	/^# define BLUE /;"	d
CXX	Makefile	/^CXX = c++$/;"	m
CYAN	Makefile	/^CYAN := \\033[1;36m$/;"	m
CYAN	Span.hpp	/^# define CYAN /;"	d
FLAG	Makefile	/^FLAG = -Wall -Wextra -Werror -std=c++98$/;"	m
GRAY	Span.hpp	/^# define GRAY /;"	d
GREEN	Makefile	/^GREEN := \\033[1;32m$/;"	m
GREEN	Span.hpp	/^# define GREEN /;"	d
NAME	Makefile	/^NAME = span$/;"	m
PURPLE	Span.hpp	/^# define PURPLE /;"	d
RED	Makefile	/^RED := \\033[1;31m$/;"	m
RED	Span.hpp	/^# define RED /;"	d
RESET	Makefile	/^RESET := \\033[0m$/;"	m
RESET	Span.hpp	/^# define RESET /;"	d
SOURCE	Makefile	/^SOURCE = main.cpp \\$/;"	m
SPAN_HPP	Span.hpp	/^#define SPAN_HPP$/;"	d
Span	Span.cpp	/^Span::Span(const Span& other)$/;"	f	class:Span
Span	Span.cpp	/^Span::Span(unsigned int N) : _nSize(N)$/;"	f	class:Span
Span	Span.hpp	/^class Span$/;"	c
SpanIsEmptyException	Span.hpp	/^		class SpanIsEmptyException : public std::exception$/;"	c	class:Span
SpanIsFullException	Span.hpp	/^		class SpanIsFullException : public std::exception$/;"	c	class:Span
SpanIsOnlyOneException	Span.hpp	/^		class SpanIsOnlyOneException : public std::exception$/;"	c	class:Span
SpanNotFoundException	Span.hpp	/^		class SpanNotFoundException : public std::exception$/;"	c	class:Span
YELLOW	Makefile	/^YELLOW := \\033[1;33m$/;"	m
YELLOW	Span.hpp	/^# define YELLOW /;"	d
_n	Span.hpp	/^	std::vector<int> _n;$/;"	m	class:Span	typeref:typename:std::vector<int>
_nSize	Span.hpp	/^	unsigned int _nSize;$/;"	m	class:Span	typeref:typename:unsigned int
addNumber	Span.cpp	/^void Span::addNumber(int n)$/;"	f	class:Span	typeref:typename:void
addRange	Span.hpp	/^	void addRange(T begin, T end)$/;"	f	class:Span	typeref:typename:void
all	Makefile	/^all: $(NAME)$/;"	t
clean	Makefile	/^clean:$/;"	t
fclean	Makefile	/^fclean: clean$/;"	t
hidden	Makefile	/^hidden:$/;"	t
longestSpan	Span.cpp	/^int Span::longestSpan() const { return (0);}$/;"	f	class:Span	typeref:typename:int
main	main.cpp	/^int main()$/;"	f	typeref:typename:int
operator =	Span.cpp	/^Span& Span::operator=(const Span &other)$/;"	f	class:Span	typeref:typename:Span &
re	Makefile	/^re: fclean all$/;"	t
shortestSpan	Span.cpp	/^int Span::shortestSpan() const { return (0);}$/;"	f	class:Span	typeref:typename:int
what	Span.cpp	/^const char	*Span::SpanIsEmptyException::what() const throw()$/;"	f	class:Span::SpanIsEmptyException	typeref:typename:const char *
what	Span.cpp	/^const char	*Span::SpanIsFullException::what() const throw()$/;"	f	class:Span::SpanIsFullException	typeref:typename:const char *
what	Span.cpp	/^const char	*Span::SpanIsOnlyOneException::what() const throw()$/;"	f	class:Span::SpanIsOnlyOneException	typeref:typename:const char *
what	Span.cpp	/^const char	*Span::SpanNotFoundException::what() const throw()$/;"	f	class:Span::SpanNotFoundException	typeref:typename:const char *
~Span	Span.cpp	/^Span::~Span() {}$/;"	f	class:Span
